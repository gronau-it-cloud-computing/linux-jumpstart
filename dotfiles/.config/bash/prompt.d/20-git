__prompt_command_git_branch()
{
	local g="${1}"

	local r=''
	if [[ -d "$g/rebase-merge" ]] ; then
		if [[ -f "$g/rebase-merge/interactive" ]] ; then
			r="|REBASE-i"
		else
			r="|REBASE-m"
		fi
	else
		if [[ -d "$g/rebase-apply" ]] ; then
			if [[ -f "$g/rebase-apply/rebasing" ]] ; then
				r="|REBASE"
			elif [[ -f "$g/rebase-apply/applying" ]] ; then
				r="|AM"
			else
				r="|AM/REBASE"
			fi
		elif [[ -f "$g/MERGE_HEAD" ]] ; then
			r="|MERGING"
		elif [[ -f "$g/CHERRY_PICK_HEAD" ]] ; then
			r="|CHERRY-PICKING"
		elif [[ -f "$g/REVERT_HEAD" ]] ; then
			r="|REVERTING"
		elif [[ -f "$g/BISECT_LOG" ]] ; then
			r="|BISECTING"
		fi
	fi

	local b
	b="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"
	if [[ $? -eq 0 ]] ; then
		[[ "${b}" == 'HEAD' ]] && b="$(git rev-parse --short HEAD)"
		printf "%s" "${b##refs/heads/}${r}"
	else
		printf '¯\_(ツ)_/¯'
	fi
}

__prompt_command_git_color()
{
	local color=''

	while read -r line ; do
		code="${line:0:2}"
		case "${code}" in
			\?\?)
				color="${_pryellow}" ;;
			*)
				color="${_prred}" ; break ;;
		esac
	done < <(git status --porcelain -unormal 2>/dev/null)

	printf '%s' "${color}"
}

__prompt_command_git()
{
	local g
	g="$(git rev-parse --git-dir 2>/dev/null)"
	if (( "$?" == 0 )) ; then
		local branch="$(__prompt_command_git_branch "${g}")"
		local color="$(__prompt_command_git_color)"

		printf '(%s)' "${color}${branch}${_prnorm}"
	fi
}
